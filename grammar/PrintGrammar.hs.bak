{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])


instance Print Prog where
  prt i e = case e of
    Program decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print Expr where
  prt i e = case e of
    EOr expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
    EAnd expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    ERel expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    EAdd expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    EMul expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    Not expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    Neg expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    EVar id -> prPrec i 6 (concatD [prt 0 id])
    ELitInt n -> prPrec i 6 (concatD [prt 0 n])
    ELitTrue -> prPrec i 6 (concatD [doc (showString "True")])
    ELitFalse -> prPrec i 6 (concatD [doc (showString "False")])
    EListConsA exprs -> prPrec i 6 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])
    EListConsB expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString ":"), prt 0 expr2])
    ECase expr patexprs -> prPrec i 0 (concatD [doc (showString "case"), prt 0 expr, doc (showString "of"), prt 0 patexprs])
    ELet decls expr -> prPrec i 0 (concatD [doc (showString "let"), prt 0 decls, doc (showString "in"), prt 0 expr])
    ELambda ids expr -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 ids, doc (showString "->"), prt 0 expr])
    EIf expr1 expr2 expr3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr1, doc (showString "then"), prt 0 expr2, doc (showString "else"), prt 0 expr3])
    EFunApp expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, prt 6 expr2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print PatExpr where
  prt i e = case e of
    CaseAlt pat expr -> prPrec i 0 (concatD [prt 0 pat, doc (showString "->"), prt 0 expr])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print AddOp where
  prt i e = case e of
    Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Minus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print MulOp where
  prt i e = case e of
    Times -> prPrec i 0 (concatD [doc (showString "*")])
    Div -> prPrec i 0 (concatD [doc (showString "/")])
    Mod -> prPrec i 0 (concatD [doc (showString "%")])

instance Print RelOp where
  prt i e = case e of
    LTH -> prPrec i 0 (concatD [doc (showString "<")])
    LE -> prPrec i 0 (concatD [doc (showString "<=")])
    GTH -> prPrec i 0 (concatD [doc (showString ">")])
    GE -> prPrec i 0 (concatD [doc (showString ">=")])
    EQU -> prPrec i 0 (concatD [doc (showString "==")])
    NE -> prPrec i 0 (concatD [doc (showString "/=")])

instance Print TypeSig where
  prt i e = case e of
    TypeSign id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString "::"), prt 0 type_])

instance Print Type where
  prt i e = case e of
    FunType type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
    IntType -> prPrec i 1 (concatD [doc (showString "Int")])
    BoolType -> prPrec i 1 (concatD [doc (showString "Bool")])
    TypeList type_ -> prPrec i 1 (concatD [doc (showString "["), prt 1 type_, doc (showString "]")])

instance Print Lit where
  prt i e = case e of
    LitInteger n -> prPrec i 0 (concatD [prt 0 n])
    Lit_True -> prPrec i 0 (concatD [doc (showString "True")])
    Lit_False -> prPrec i 0 (concatD [doc (showString "False")])

instance Print Pat where
  prt i e = case e of
    PatLit lit -> prPrec i 1 (concatD [prt 0 lit])
    PatVar id -> prPrec i 1 (concatD [prt 0 id])
    PatDummy -> prPrec i 1 (concatD [doc (showString "_")])
    PatListE -> prPrec i 1 (concatD [doc (showString "[]")])
    PatListA pats -> prPrec i 1 (concatD [doc (showString "["), prt 0 pats, doc (showString "]")])
    PatListB pat1 pat2 -> prPrec i 0 (concatD [prt 1 pat1, doc (showString ":"), prt 0 pat2])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Decl where
  prt i e = case e of
    FunDecl typesig id ids expr -> prPrec i 0 (concatD [prt 0 typesig, prt 0 id, prt 0 ids, doc (showString "="), prt 0 expr])
    VarDecl id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])

