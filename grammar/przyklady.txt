1. Definiowanie funkcji, pattern matching na listach, dwa typy wartości.

    f :: [Int] -> Bool
    f []     = False
    f (x:xs) = True

2. Funkcje wyższego rzędu, porównania, lambdy, funkcje wieloargumentowe.

    f :: [Int] -> Int -> [Int]
    f l n = filter (\ x -> x > n) l

3. Deklaratywny if, rekurencja, arytmetyka.

    f :: Int -> Int -> Int
    f x n = if x >= n then x else f x*2 n

4. Częściowa aplikacja.

    f :: Int -> ([Int] -> [Int])
    f n = filter (\ x -> x > n)
