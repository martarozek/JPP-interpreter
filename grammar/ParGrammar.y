-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProg Prog
%name pListDecl ListDecl
%name pExpr Expr
%name pExpr1 Expr1
%name pExpr2 Expr2
%name pExpr3 Expr3
%name pExpr4 Expr4
%name pExpr5 Expr5
%name pExpr6 Expr6
%name pPatExpr PatExpr
%name pListPatExpr ListPatExpr
%name pListExpr ListExpr
%name pAddOp AddOp
%name pMulOp MulOp
%name pRelOp RelOp
%name pTypeSig TypeSig
%name pType Type
%name pType1 Type1
%name pLit Lit
%name pPat1 Pat1
%name pPat Pat
%name pListPat ListPat
%name pDecl Decl
%name pListIdent ListIdent
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '%' { PT _ (TS _ 2) }
  '&&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  ')' { PT _ (TS _ 5) }
  '*' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '->' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  '/=' { PT _ (TS _ 12) }
  ':' { PT _ (TS _ 13) }
  '::' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '<' { PT _ (TS _ 16) }
  '<=' { PT _ (TS _ 17) }
  '=' { PT _ (TS _ 18) }
  '==' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  '>=' { PT _ (TS _ 21) }
  'Bool' { PT _ (TS _ 22) }
  'False' { PT _ (TS _ 23) }
  'Int' { PT _ (TS _ 24) }
  'True' { PT _ (TS _ 25) }
  '[' { PT _ (TS _ 26) }
  '[]' { PT _ (TS _ 27) }
  '\\' { PT _ (TS _ 28) }
  ']' { PT _ (TS _ 29) }
  '_' { PT _ (TS _ 30) }
  'case' { PT _ (TS _ 31) }
  'else' { PT _ (TS _ 32) }
  'if' { PT _ (TS _ 33) }
  'in' { PT _ (TS _ 34) }
  'let' { PT _ (TS _ 35) }
  'of' { PT _ (TS _ 36) }
  'then' { PT _ (TS _ 37) }
  '||' { PT _ (TS _ 38) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Prog :: { Prog }
Prog : ListDecl { AbsGrammar.Program $1 }
ListDecl :: { [Decl] }
ListDecl : Decl ';' { (:[]) $1 } | Decl ';' ListDecl { (:) $1 $3 }
Expr :: { Expr }
Expr : Expr1 '||' Expr { AbsGrammar.EOr $1 $3 }
     | Expr1 ':' Expr { AbsGrammar.EListConsB $1 $3 }
     | 'case' Expr 'of' ListPatExpr { AbsGrammar.ECase $2 $4 }
     | 'let' ListDecl 'in' Expr { AbsGrammar.ELet $2 $4 }
     | '\\' ListIdent '->' Expr { AbsGrammar.ELambda $2 $4 }
     | 'if' Expr 'then' Expr 'else' Expr { AbsGrammar.EIf $2 $4 $6 }
     | Expr1 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr1 { AbsGrammar.EAnd $1 $3 } | Expr2 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { AbsGrammar.ERel $1 $2 $3 }
      | Expr3 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { AbsGrammar.EAdd $1 $2 $3 }
      | Expr4 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { AbsGrammar.EMul $1 $2 $3 }
      | Expr5 { $1 }
Expr5 :: { Expr }
Expr5 : '!' Expr6 { AbsGrammar.Not $2 }
      | '-' Expr6 { AbsGrammar.Neg $2 }
      | Expr5 Expr6 { AbsGrammar.EFunApp $1 $2 }
      | Expr6 { $1 }
Expr6 :: { Expr }
Expr6 : Ident { AbsGrammar.EVar $1 }
      | Integer { AbsGrammar.ELitInt $1 }
      | 'True' { AbsGrammar.ELitTrue }
      | 'False' { AbsGrammar.ELitFalse }
      | '[]' { AbsGrammar.EListConsE }
      | '[' ListExpr ']' { AbsGrammar.EListConsA $2 }
      | '(' Expr ')' { $2 }
PatExpr :: { PatExpr }
PatExpr : Pat '->' Expr { AbsGrammar.CaseAlt $1 $3 }
ListPatExpr :: { [PatExpr] }
ListPatExpr : PatExpr ';' { (:[]) $1 }
            | PatExpr ';' ListPatExpr { (:) $1 $3 }
ListExpr :: { [Expr] }
ListExpr : Expr { (:[]) $1 } | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { AbsGrammar.Plus } | '-' { AbsGrammar.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsGrammar.Times }
      | '/' { AbsGrammar.Div }
      | '%' { AbsGrammar.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsGrammar.LTH }
      | '<=' { AbsGrammar.LE }
      | '>' { AbsGrammar.GTH }
      | '>=' { AbsGrammar.GE }
      | '==' { AbsGrammar.EQU }
      | '/=' { AbsGrammar.NE }
TypeSig :: { TypeSig }
TypeSig : Ident '::' Type { AbsGrammar.TypeSign $1 $3 }
Type :: { Type }
Type : Type1 '->' Type { AbsGrammar.FunType $1 $3 } | Type1 { $1 }
Type1 :: { Type }
Type1 : 'Int' { AbsGrammar.IntType }
      | 'Bool' { AbsGrammar.BoolType }
      | '[' Type1 ']' { AbsGrammar.TypeList $2 }
      | '(' Type ')' { $2 }
Lit :: { Lit }
Lit : Integer { AbsGrammar.LitInteger $1 }
    | 'True' { AbsGrammar.Lit_True }
    | 'False' { AbsGrammar.Lit_False }
Pat1 :: { Pat }
Pat1 : Lit { AbsGrammar.PatLit $1 }
     | Ident { AbsGrammar.PatVar $1 }
     | '_' { AbsGrammar.PatDummy }
     | '[]' { AbsGrammar.PatListE }
     | '[' ListPat ']' { AbsGrammar.PatListA $2 }
     | '(' Pat ')' { $2 }
Pat :: { Pat }
Pat : Pat1 ':' Pat { AbsGrammar.PatListB $1 $3 } | Pat1 { $1 }
ListPat :: { [Pat] }
ListPat : Pat { (:[]) $1 } | Pat ',' ListPat { (:) $1 $3 }
Decl :: { Decl }
Decl : TypeSig Ident ListIdent '=' Expr { AbsGrammar.FunDecl $1 $2 $3 $5 }
     | Ident '=' Expr { AbsGrammar.VarDecl $1 $3 }
ListIdent :: { [Ident] }
ListIdent : Ident { (:[]) $1 } | Ident ListIdent { (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

